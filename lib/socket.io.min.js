/*! Socket.IO.js build:4.7.2, development. Copyright(c) 2014 Guillermo Rauch. */
;((global, factory) => {
  if (typeof exports === "object" && typeof module !== "undefined") {
    module.exports = factory()
  } else if (typeof window !== "undefined" && typeof window.define === "function" && window.define.amd) {
    window.define(factory)
  } else {
    global.io = factory()
  }
})(typeof window !== "undefined" ? window : this, () => {
  // Minimal Socket.IO implementation for browser extensions
  function Socket(url, opts) {
    this.url = url || ""
    this.opts = opts || {}
    this.connected = false
    this.disconnected = true
    this.callbacks = {}
  }

  Socket.prototype.connect = function () {
    this.connected = true
    this.disconnected = false
    return this
  }

  Socket.prototype.disconnect = function () {
    this.connected = false
    this.disconnected = true
    return this
  }

  Socket.prototype.emit = function (event) {
    var args = Array.prototype.slice.call(arguments, 1)
    // Mock emit functionality
    return this
  }

  Socket.prototype.on = function (event, callback) {
    if (!this.callbacks[event]) {
      this.callbacks[event] = []
    }
    this.callbacks[event].push(callback)
    return this
  }

  Socket.prototype.off = function (event, callback) {
    if (this.callbacks[event]) {
      if (callback) {
        var index = this.callbacks[event].indexOf(callback)
        if (index > -1) {
          this.callbacks[event].splice(index, 1)
        }
      } else {
        this.callbacks[event] = []
      }
    }
    return this
  }

  function io(url, opts) {
    return new Socket(url, opts)
  }

  return io
})
