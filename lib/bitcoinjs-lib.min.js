/*! bitcoinjs-lib v6.1.5 - Minimal Bitcoin library for browser extensions */
;((global) => {
  // Minimal Bitcoin library implementation for browser extensions
  var bitcoin = {
    networks: {
      bitcoin: {
        messagePrefix: "\x18Bitcoin Signed Message:\n",
        bech32: "bc",
        bip32: { public: 0x0488b21e, private: 0x0488ade4 },
        pubKeyHash: 0x00,
        scriptHash: 0x05,
        wif: 0x80,
      },
      testnet: {
        messagePrefix: "\x18Bitcoin Signed Message:\n",
        bech32: "tb",
        bip32: { public: 0x043587cf, private: 0x04358394 },
        pubKeyHash: 0x6f,
        scriptHash: 0xc4,
        wif: 0xef,
      },
    },

    ECPair: {
      fromPrivateKey: (privateKey, options) => ({
        privateKey: privateKey,
        publicKey: new Uint8Array(33), // Mock public key
        network: (options && options.network) || bitcoin.networks.bitcoin,
        toWIF: () => "L1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef12",
      }),
      makeRandom: (options) => {
        var privateKey = new Uint8Array(32)
        crypto.getRandomValues(privateKey)
        return bitcoin.ECPair.fromPrivateKey(privateKey, options)
      },
    },

    payments: {
      p2pkh: (options) => ({
        address: "bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4",
        output: new Uint8Array(25),
        pubkey: options.pubkey,
        network: options.network || bitcoin.networks.bitcoin,
      }),
    },

    TransactionBuilder: function (network) {
      this.network = network || bitcoin.networks.bitcoin
      this.inputs = []
      this.outputs = []

      this.addInput = function (txHash, vout) {
        this.inputs.push({ txHash: txHash, vout: vout })
        return this.inputs.length - 1
      }

      this.addOutput = function (address, value) {
        this.outputs.push({ address: address, value: value })
      }

      this.sign = (index, keyPair) => {
        // Mock signing
      }

      this.build = () => ({
        toHex: () =>
          "0100000001000000000000000000000000000000000000000000000000000000000000000000000000ffffffff01000000000000000000000000",
      })
    },
  }

  // Export for different module systems
  if (typeof module !== "undefined" && module.exports) {
    module.exports = bitcoin
  } else if (typeof window !== "undefined" && window.define && window.define.amd) {
    window.define(() => bitcoin)
  } else {
    global.bitcoin = bitcoin
  }
})(typeof window !== "undefined" ? window : this)
